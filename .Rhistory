columns = everything(),
rows = delivery_method == "Cesarean"
)
) |>
tab_style(
style = cell_text(color = "#0e2635", weight = "bold"),
locations = cells_body(
columns = everything(),
rows = delivery_method == "Vaginal"
)
) |>
cols_label(
delivery_method = "",
n = "Number of<br>deliveries",
p = "Proportion of<br>deliveries",
.fn = md
)
# Chunk 1: load-packages
#| label: load-packages
#| message: false
require(SASxport) # needed to load NHANES data
library(dplyr)
library(knitr)
library(foreign) # needed to load NHANES data
library(readxl)
library(scales)
library(plotly) # added for ggplotly() function
library(viridis) # added for color palette
library(DT)
library(gt)
library(tidyverse)
theme_set(theme_minimal(base_size = 24, base_family = "sans"))
# Chunk 2: load-data
#| label: load-data
#| message: false
cbc_diff <- read.xport("data/P_CBC.xpt.txt") %>%
mutate(identifier = SEQN, wbc_count = LBXWBCSI, platelet_count = LBXPLTSI) %>%
filter(complete.cases(wbc_count, platelet_count)) %>%
select(identifier, wbc_count, platelet_count)
demographics <- read.xport("data/P_DEMO.xpt.txt") %>%
filter(RIDSTATR == 2) %>%
filter(RIDAGEYR >= 2 & RIDAGEYR <= 17 ) %>%
mutate(age = RIDAGEYR, identifier = SEQN, gender = RIAGENDR, country_origin = DMDBORN4) %>%
mutate(gender_class = case_when(gender == 1 ~ "Male", gender == 2 ~ "Female")) %>%
mutate(gender_class = factor(gender_class, levels = c("Male","Female"))) %>%
mutate(country_class = case_when(country_origin == 1 ~ "U.S.", country_origin == 2 ~ "Other")) %>%
mutate(country_class = factor(country_class, levels = c("U.S.","Other"))) %>%
select(identifier, age, gender, gender_class, country_origin, country_class)
body_measures <- read.xport("data/P_BMX.xpt.txt") %>%
mutate(identifier = SEQN, weight = BMXWT, bmi = BMXBMI, bmi_class = BMDBMIC) %>%
mutate(bmi_group = case_when(bmi_class == 1 ~ "Underweight", bmi_class == 2 ~ "Normal weight", bmi_class == 3 ~ "Overweight", bmi_class == 4 ~ "Obese")) %>%
mutate(bmi_group = factor(bmi_group, levels = c("Underweight", "Normal weight", "Overweight", "Obese"))) %>%
filter(complete.cases(weight, bmi, bmi_class, bmi_group)) %>%
select(identifier, weight, bmi, bmi_class, bmi_group)
s1 <- left_join(demographics, cbc_diff, by = "identifier") %>%
filter(complete.cases(wbc_count, platelet_count))
study1 <- left_join(s1, body_measures, by = "identifier") %>%
filter(complete.cases(weight, bmi, bmi_class, bmi_group))
head(study1)
normal_bmi <- study1 %>%
filter(bmi_group == "Normal weight")
high_bmi <- study1 %>%
filter(bmi_group %in% c("Overweight", "Obese"))
male_normal_bmi <- normal_bmi %>%
filter(gender_class == "Male")
female_normal_bmi <- normal_bmi %>%
filter(gender_class == "Female")
male_high_bmi <- high_bmi %>%
filter(gender_class == "Male")
female_high_bmi <- high_bmi %>%
filter(gender_class == "Female")
# Chunk 3: set-inputs
#| label: set-inputs
# time_period <- paste(params$month, params$year)
# Chunk 4: prep-data
#| label: prep-data
# ld <- ld |>
#   mutate(
#     delivery_method = str_to_sentence(delivery_method),
#     term = str_to_sentence(term),
#     parity = case_when(
#       parity == "1"  ~ "Nulliparous",
#       parity == "2"  ~ "Primiparous",
#       parity == "3+" ~ "Multiparous"
#     ),
#     parity = fct_relevel(parity, "Nulliparous", "Primiparous", "Multiparous"),
#     maternal_age = fct_relevel(maternal_age, "<20", "20-34", "35+")
#   )
# Chunk 5: all-values
#| label: all-values
#| results: hide
# n_births <- nrow(ld)
#
# p_cesarean <- ld |>
#   count(delivery_method) |>
#   mutate(p = n / sum(n)) |>
#   filter(delivery_method == "Cesarean") |>
#   pull(p)
#
# p_cesarean_color <- case_when(
#   between(p_cesarean, params$us_cesarean_rate, params$us_cesarean_rate + params$threshold_diff) ~ "warning",
#   p_cesarean > params$us_cesarean_rate + params$threshold_diff ~ "danger",
#   .default = "light"
#   )
#
# p_preterm <- ld |>
#   count(term) |>
#   mutate(p = n / sum(n)) |>
#   filter(term == "Pre-term") |>
#   pull(p)
#
# p_preterm_color <- case_when(
#   between(p_preterm, params$us_preterm_rate, params$us_preterm_rate + params$threshold_diff) ~ "warning",
#   p_preterm > params$us_preterm_rate + params$threshold_diff ~ "danger",
#   .default = "light"
#   )
# ```
#
# ## Row {height="20%"}
#
# ```{r}
# #| content: valuebox
# #| title: "Total births"
#
# list(
#   icon = "file-medical",
#   color = "primary",
#   value = n_births
# )
# ```
#
# ```{r}
# #| content: valuebox
# #| title: "Cesarean deliveries"
#
# list(
#   icon = "clipboard2-pulse",
#   color = p_cesarean_color,
#   value = label_percent(accuracy = 0.1)(p_cesarean)
# )
# ```
#
# ```{r}
# #| content: valuebox
# #| title: "Pre-term births"
#
# list(
#   icon = "calendar-week",
#   color = p_preterm_color,
#   value = label_percent(accuracy = 0.1)(p_preterm)
# Chunk 6
#| title: Delivery method
# ld |>
#   count(delivery_method) |>
#   mutate(p = n / sum(n)) |>
#   gt() |>
#   fmt_percent(
#     columns = p,
#     decimals = 1
#   ) |>
#   tab_style(
#     style = cell_text(color = "#ae8b2d", weight = "bold"),
#     locations = cells_body(
#       columns = everything(),
#       rows = delivery_method == "Cesarean"
#     )
#   ) |>
#   tab_style(
#     style = cell_text(color = "#0e2635", weight = "bold"),
#     locations = cells_body(
#       columns = everything(),
#       rows = delivery_method == "Vaginal"
#     )
#   ) |>
#   cols_label(
#     delivery_method = "",
#     n = "Number of<br>deliveries",
#     p = "Proportion of<br>deliveries",
#     .fn = md
#   )
# Chunk 7
#| title: Maternal age
# ld |>
#   count(maternal_age) |>
#   mutate(p = n / sum(n)) |>
#   ggplot(aes(x = maternal_age, y = n, group = 1)) +
#   geom_line(linewidth = 2, color = "#0e263560") +
#   geom_point(size = 3, color = "#0e2635") +
#   geom_point(size = 6, color = "#0e2635", shape = "circle open") +
#   labs(x = NULL) +
#   scale_y_continuous(
#     "Count",
#     sec.axis = sec_axis(~ . / n_births, name = "Proportion", labels = label_percent())
#   )
# Chunk 8
#| title: Delivery method and parity
# ld |>
#   count(parity, delivery_method) |>
#   ggplot(aes(x = n, y = fct_rev(parity), fill = delivery_method)) +
#   geom_col(position = "fill", color = "white") +
#   scale_fill_manual(
#     values = c("#ae8b2d", "#0e2635"),
#     guide = guide_legend(reverse = TRUE)
#   ) +
#   scale_x_continuous(labels = label_percent()) +
#   labs(y = NULL, x = NULL, fill = "Delivery\nmethod")
# Chunk 9
#| title: Delivery method and maternal age
# ld |>
#   count(maternal_age, delivery_method) |>
#   ggplot(aes(x = n, y = fct_rev(maternal_age), fill = delivery_method)) +
#   geom_col(position = "fill", color = "white") +
#   scale_fill_manual(
#     values = c("#ae8b2d", "#0e2635"),
#     guide = guide_legend(reverse = TRUE)
#   ) +
#   scale_x_continuous(labels = label_percent()) +
#   labs(y = NULL, x = NULL, fill = "Delivery\nmethod")
# Chunk 10: vaginal-values
#| label: vaginal-values
#| results: hide
# ld_v <- ld |>
#   filter(delivery_method == "Vaginal")
#
# n_births_v <- nrow(ld_v)
#
# p_preterm_v <- ld_v |>
#   count(term) |>
#   mutate(p = n / sum(n)) |>
#   filter(term == "Pre-term") |>
#   pull(p)
#
# p_preterm_color_v <- case_when(
#   between(p_preterm_v, params$us_preterm_rate, params$us_preterm_rate + params$threshold_diff) ~ "warning",
#   p_preterm_v > params$us_preterm_rate + params$threshold_diff ~ "danger",
#   .default = "light"
#   )
# Chunk 11
#| component: valuebox
#| title: "Total births"
# list(
#   icon = "file-medical",
#   color = "primary",
#   value = n_births_v
# )
# Chunk 12
#| component: valuebox
#| title: "Pre-term births"
# list(
#   icon = "calendar-week",
#   color = p_preterm_color_v,
#   value = label_percent(accuracy = 0.1)(p_preterm_v)
# )
# Chunk 13
#| title: Maternal age
# ld_v |>
#   count(maternal_age) |>
#   mutate(p = n / sum(n)) |>
#   ggplot(aes(x = maternal_age, y = n, group = 1)) +
#   geom_line(linewidth = 2, color = "#0e263560") +
#   geom_point(size = 3, color = "#0e2635") +
#   geom_point(size = 6, color = "#0e2635", shape = "circle open") +
#   labs(x = NULL) +
#   scale_y_continuous(
#     "Count",
#     sec.axis = sec_axis(~ . / n_births, name = "Proportion", labels = label_percent())
#   )
# Chunk 14
#| title: Maternal age and parity
# ld_v |>
#   count(maternal_age, parity) |>
#   ggplot(aes(x = n, y = fct_rev(maternal_age), fill = fct_rev(parity))) +
#   geom_col(position = "fill", color = "white") +
#   scale_fill_brewer(
#     palette = "Blues",
#     guide = guide_legend(reverse = TRUE),
#     direction = -1
#   ) +
#   scale_x_continuous(labels = label_percent()) +
#   labs(y = NULL, x = NULL, fill = "Parity")
# Chunk 15
#| title: Maternal age and term
# ld_v |>
#   count(maternal_age, term) |>
#   ggplot(aes(x = n, y = fct_rev(maternal_age), fill = fct_rev(term))) +
#   geom_col(position = "fill", color = "white") +
#   scale_fill_brewer(
#     palette = "Greens",
#     guide = guide_legend(reverse = TRUE),
#     direction = -1
#   ) +
#   scale_x_continuous(labels = label_percent()) +
#   labs(y = NULL, x = NULL, fill = "Term")
# Chunk 16
#| title: Data
# ld_v |>
#   select(-delivery_method) |>
#   arrange(patient_id) |>
#   datatable(
#     colnames = c("ID", "Maternal age", "Parity", "Term"),
#     options = list(
#       dom = "lrtip",
#       paging = TRUE,
#       lengthMenu = c(5, 10, 25),
#       pageLength = 10,
#       scrollY = TRUE
#     ),
#   )
# Chunk 17: cesarean-values
#| label: cesarean-values
#| results: hide
# ld_c <- ld |>
#   filter(delivery_method == "Cesarean")
#
# n_births_c <- nrow(ld_c)
#
# p_preterm_c <- ld_c |>
#   count(term) |>
#   mutate(p = n / sum(n)) |>
#   filter(term == "Pre-term") |>
#   pull(p)
#
# p_preterm_color_c <- case_when(
#   between(p_preterm_c, params$us_preterm_rate, params$us_preterm_rate + params$threshold_diff) ~ "warning",
#   p_preterm_c > params$us_preterm_rate + params$threshold_diff ~ "danger",
#   .default = "light"
#   )
# Chunk 18
#| component: valuebox
#| title: "Total births"
# list(
#   icon = "file-medical",
#   color = "primary",
#   value = n_births_c
# )
# Chunk 19
#| component: valuebox
#| title: "Pre-term births"
# list(
#   icon = "calendar-week",
#   color = p_preterm_color_c,
#   value = label_percent(accuracy = 0.1)(p_preterm_c)
# )
# Chunk 20
#| title: Maternal age
# ld_c |>
#   count(maternal_age) |>
#   mutate(p = n / sum(n)) |>
#   ggplot(aes(x = maternal_age, y = n, group = 1)) +
#   geom_line(linewidth = 2, color = "#0e263560") +
#   geom_point(size = 3, color = "#0e2635") +
#   geom_point(size = 6, color = "#0e2635", shape = "circle open") +
#   labs(x = NULL) +
#   scale_y_continuous(
#     "Count",
#     sec.axis = sec_axis(~ . / n_births, name = "Proportion", labels = label_percent())
#   )
# Chunk 21
#| title: Maternal age and parity
# ld_c |>
#   count(maternal_age, parity) |>
#   ggplot(aes(x = n, y = fct_rev(maternal_age), fill = fct_rev(parity))) +
#   geom_col(position = "fill", color = "white") +
#   scale_fill_brewer(
#     palette = "Blues",
#     guide = guide_legend(reverse = TRUE),
#     direction = -1
#   ) +
#   scale_x_continuous(labels = label_percent()) +
#   labs(y = NULL, x = NULL, fill = "Parity")
# Chunk 22
#| title: Maternal age and term
# ld_c |>
#   count(maternal_age, term) |>
#   ggplot(aes(x = n, y = fct_rev(maternal_age), fill = fct_rev(term))) +
#   geom_col(position = "fill", color = "white") +
#   scale_fill_brewer(
#     palette = "Greens",
#     guide = guide_legend(reverse = TRUE),
#     direction = -1
#   ) +
#   scale_x_continuous(labels = label_percent()) +
#   labs(y = NULL, x = NULL, fill = "Term")
# Chunk 23
#| title: Data
# ld_c |>
#   select(-delivery_method) |>
#   arrange(patient_id) |>
#   datatable(
#     colnames = c("ID", "Maternal age", "Parity", "Term"),
#     options = list(
#       dom = "lrtip",
#       paging = TRUE,
#       lengthMenu = c(5, 10, 25),
#       pageLength = 10,
#       scrollY = TRUE
#     ),
#   )
# Chunk 24
# ld |>
#   arrange(patient_id) |>
#   datatable(
#     colnames = c("ID", "Maternal age", "Delivery method", "Parity", "Term"),
#     options = list(dom = 'ftp', paging = TRUE)
#     )
#| label: load-packages
#| message: false
require(SASxport) # needed to load NHANES data
library(dplyr)
library(knitr)
library(foreign) # needed to load NHANES data
library(readxl)
library(scales)
library(plotly) # added for ggplotly() function
library(viridis) # added for color palette
library(DT)
library(gt)
library(tidyverse)
theme_set(theme_minimal(base_size = 24, base_family = "sans"))
#| label: load-data
#| message: false
cbc_diff <- read.xport("data/P_CBC.xpt.txt") %>%
mutate(identifier = SEQN, wbc_count = LBXWBCSI, platelet_count = LBXPLTSI) %>%
filter(complete.cases(wbc_count, platelet_count)) %>%
select(identifier, wbc_count, platelet_count)
demographics <- read.xport("data/P_DEMO.xpt.txt") %>%
filter(RIDSTATR == 2) %>%
filter(RIDAGEYR >= 2 & RIDAGEYR <= 17 ) %>%
mutate(age = RIDAGEYR, identifier = SEQN, gender = RIAGENDR, country_origin = DMDBORN4) %>%
mutate(gender_class = case_when(gender == 1 ~ "Male", gender == 2 ~ "Female")) %>%
mutate(gender_class = factor(gender_class, levels = c("Male","Female"))) %>%
mutate(country_class = case_when(country_origin == 1 ~ "U.S.", country_origin == 2 ~ "Other")) %>%
mutate(country_class = factor(country_class, levels = c("U.S.","Other"))) %>%
select(identifier, age, gender, gender_class, country_origin, country_class)
body_measures <- read.xport("data/P_BMX.xpt.txt") %>%
mutate(identifier = SEQN, weight = BMXWT, bmi = BMXBMI, bmi_class = BMDBMIC) %>%
mutate(bmi_group = case_when(bmi_class == 1 ~ "Underweight", bmi_class == 2 ~ "Normal weight", bmi_class == 3 ~ "Overweight", bmi_class == 4 ~ "Obese")) %>%
mutate(bmi_group = factor(bmi_group, levels = c("Underweight", "Normal weight", "Overweight", "Obese"))) %>%
filter(complete.cases(weight, bmi, bmi_class, bmi_group)) %>%
select(identifier, weight, bmi, bmi_class, bmi_group)
s1 <- left_join(demographics, cbc_diff, by = "identifier") %>%
filter(complete.cases(wbc_count, platelet_count))
study1 <- left_join(s1, body_measures, by = "identifier") %>%
filter(complete.cases(weight, bmi, bmi_class, bmi_group))
head(study1)
normal_bmi <- study1 %>%
filter(bmi_group == "Normal weight")
high_bmi <- study1 %>%
filter(bmi_group %in% c("Overweight", "Obese"))
male_normal_bmi <- normal_bmi %>%
filter(gender_class == "Male")
female_normal_bmi <- normal_bmi %>%
filter(gender_class == "Female")
male_high_bmi <- high_bmi %>%
filter(gender_class == "Male")
female_high_bmi <- high_bmi %>%
filter(gender_class == "Female")
plot(cars)
plot(cars)
plot(cars)
plot(iris)
#| label: load-packages
#| message: false
library(dplyr)
library(knitr)
library(foreign) # needed to load NHANES data
library(readxl)
library(scales)
library(plotly) # added for ggplotly() function
library(viridis) # added for color palette
library(DT)
library(gt)
library(tidyverse)
theme_set(theme_minimal(base_size = 24, base_family = "sans"))
#| label: load-data
#| message: false
cbc_diff <- read.xport("data/P_CBC.xpt.txt") %>%
mutate(identifier = SEQN, wbc_count = LBXWBCSI, platelet_count = LBXPLTSI) %>%
filter(complete.cases(wbc_count, platelet_count)) %>%
select(identifier, wbc_count, platelet_count)
demographics <- read.xport("data/P_DEMO.xpt.txt") %>%
filter(RIDSTATR == 2) %>%
filter(RIDAGEYR >= 2 & RIDAGEYR <= 17 ) %>%
mutate(age = RIDAGEYR, identifier = SEQN, gender = RIAGENDR, country_origin = DMDBORN4) %>%
mutate(gender_class = case_when(gender == 1 ~ "Male", gender == 2 ~ "Female")) %>%
mutate(gender_class = factor(gender_class, levels = c("Male","Female"))) %>%
mutate(country_class = case_when(country_origin == 1 ~ "U.S.", country_origin == 2 ~ "Other")) %>%
mutate(country_class = factor(country_class, levels = c("U.S.","Other"))) %>%
select(identifier, age, gender, gender_class, country_origin, country_class)
body_measures <- read.xport("data/P_BMX.xpt.txt") %>%
mutate(identifier = SEQN, weight = BMXWT, bmi = BMXBMI, bmi_class = BMDBMIC) %>%
mutate(bmi_group = case_when(bmi_class == 1 ~ "Underweight", bmi_class == 2 ~ "Normal weight", bmi_class == 3 ~ "Overweight", bmi_class == 4 ~ "Obese")) %>%
mutate(bmi_group = factor(bmi_group, levels = c("Underweight", "Normal weight", "Overweight", "Obese"))) %>%
filter(complete.cases(weight, bmi, bmi_class, bmi_group)) %>%
select(identifier, weight, bmi, bmi_class, bmi_group)
s1 <- left_join(demographics, cbc_diff, by = "identifier") %>%
filter(complete.cases(wbc_count, platelet_count))
study1 <- left_join(s1, body_measures, by = "identifier") %>%
filter(complete.cases(weight, bmi, bmi_class, bmi_group))
head(study1)
normal_bmi <- study1 %>%
filter(bmi_group == "Normal weight")
high_bmi <- study1 %>%
filter(bmi_group %in% c("Overweight", "Obese"))
male_normal_bmi <- normal_bmi %>%
filter(gender_class == "Male")
female_normal_bmi <- normal_bmi %>%
filter(gender_class == "Female")
male_high_bmi <- high_bmi %>%
filter(gender_class == "Male")
female_high_bmi <- high_bmi %>%
filter(gender_class == "Female")
